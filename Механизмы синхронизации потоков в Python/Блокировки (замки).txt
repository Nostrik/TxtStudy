Блокировки – это фундаментальный механизм синхронизации, который предоставлен модулем threading Python. Замок может удерживаться одним потоком в любое время, или без потока вообще. Если поток попытается удержать один замок, который уже удерживается другим потоком, выполнение первого потока будет остановлена, пока не будет снята блокировка. Замки обычно используются для синхронизации доступа к общим ресурсам. Для каждого такого источника создается объект Lock. Когда вам нужно получить доступ к ресурсу, вызовите acquire для того, чтобы поставить блок, после чего вызовете release:

lock = Lock()
 
lock.acquire() # Выполнит блокировку данного участка кода
... доступ к общим ресурсам
lock.release()

Для корректной работы важно снять блок, даже если что-то идет не так при доступе к ресурсу. Вы можете использовать try-finally для этой цели:

lock.acquire()
try:
    ... доступ к общим ресурсам
finally:
    lock.release() # освобождаем блокировку независимо от результата

В Python 2.5 и в поздних версиях, вы можете также использовать оператор with. В работе с блоком, данный оператор автоматически получает доступ к замку перед входом в блок, и отпускает его после выхода из блока:

from __future__ import with_statement # 2.5 версия!!!
 
with lock:
    ... доступ к общим ресурсам

Метод acquire принимает опциональный флаг ожидания, который может быть использоваться для того, чтобы обойти блокировку, если замок удерживается той или иной частью кода. Если вы укажите False, то метод не будет блокироваться, но вернет False, если замок уже висит:

if not lock.acquire(False):
    ... не удалось заблокировать ресурс
else:
    try:
        ... доступ к ресурсам
    finally:
        lock.release()

Вы можете использовать метод locked, чтобы проверить, работает ли замок. Обратите внимание на то, что вы не можете использовать этот метод, чтобы определить, блокируется вызов к acquire или нет. Какой-либо другой поток может получить доступ к замку между вызовом метода и следующим оператором.

if not lock.locked():
    # Другой поток может выполниться прежде чем 
    # мы выполним следующею строку
    lock.acquire() # может заблокировать все равно