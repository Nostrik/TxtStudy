Можно рассматривать все функционирующее на компьютере
программное обеспечение, включая операционную систему, в виде
набора процессов. Каждый процесс можно описать набором парамет-
ров, включая текущие значения счетчика команд, регистров и пере-
менных. С позиций данной абстрактной модели у каждого процесса
есть собственный виртуальный центральный процессор [5].В дейст-
вительности реальный процессор переключается с одного процесса
на другой. Это переключение и называется многозадачностью или
мультипрограммированием.
     Для реализации модели процессов операционная система со-
держит системную таблицу процессов (массив структур) с одним
элементом для каждого процесса. Данный элемент называется блоком
управления или дескриптором процесса. В дескрипторе процесса
прямо или косвенно (через указатели на связанные с процессом
структуры) содержится информация о состоянии процесса, его при-
оритетах, идентификаторе, параметрах планирования, о расположе-
нии образа процесса в оперативной памяти и на диске, об ожидаемых
процессом событиях, а также другая оперативная информация, необ-
ходимая ядру системы в течение всего жизненного цикла процесса,
независимо от того, находится ли процесс в активном или пассивном
состоянии [1]. При управлении процессами ядро ОС кроме дескрип-
тора использует другую информационную структуру, называемую
контекстом процесса. Контекст процесса содержит более объемную

часть информации о процессе, необходимую для возобновления вы-
полнения прерванного процесса. Эта информация включает содер-
жимое регистров процессора, данные об открытых файлах и незавер-
шенных операциях ввода-вывода, коды ошибок выполняемых сис-
темных вызовов и другие данные, характеризующие состояние вы-
числительной среды в момент прерывания.
      Каждому процессу операционной системой выделяется вирту-
альное адресное пространство, представляющее собой набор вирту-
альных адресов, необходимых для выполнения процесса. Для при-
кладных программ эти адреса первоначально назначаются транслято-
ром при создании сегментов кода и данных. Затем, при создании про-
цесса, ОС фиксирует назначенное виртуальное адресное пространст-
во в собственных системных таблицах. В ходе выполнения процесс
может увеличить размер назначенного виртуального адресного про-
странства, запросив у ОС создания дополнительных сегментов или
увеличения существующих. Максимальный размер виртуального ад-
ресного пространства ограничивается разрядностью адреса данной
архитектуры компьютера. Например, для 32-разрядных процессоров
Intel Pentium ОС может предоставить каждому процессу виртуальное
адресное пространство до 4 Гбайт. Содержимое назначенного про-
цессу виртуального адресного пространства представляет собой об-
раз процесса.
      Выполнение процесса может происходить в двух режимах: в
режиме ядра (kernel mode) или режиме задачи (user mode). В режиме
задачи процесс выполняет инструкции прикладной программы, до-
пустимые на непривилегированном уровне защиты процессора. При
этом процессу недоступны системные структуры данных [4]. Для по-
лучения услуг ядра процессу необходимо сделать системный вызов,
после чего выполнение процесса переходит на привилегированный
уровень (в режим ядра). Таким образом, ядро системы защищает соб-

ственное адресное пространство от доступа прикладного процесса,
который может нарушить целостность структур данных ядра. Соот-
ветственно и образ процесса состоит из двух частей: данных режима
задачи и данных режима ядра. Образ процесса в режиме задачи со-
стоит из сегментов кода, данных, стека, библиотек. Образ процесса в
режиме ядра состоит из структур данных, которые используются
ядром для управления процессом.