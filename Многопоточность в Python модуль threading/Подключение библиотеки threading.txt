Threading – это стандартный модуль, который поставляется вместе с интерпретатором. Программисту не нужно устанавливать его, достаточно просто подключить модуль с помощью команды:

import threading

Работать с потоками можно, создавая экземпляры класса Thread. Чтобы создать отдельный, поток нужно создать экземпляр класса и применить к нему метод start(). Вот пример:

import threading
def myfunc(a, b):
    print('сумма :',a + b)
thr1 = threading.Thread(target = myfunc, args = (1, 2)).start()
print('основной поток')

основной поток
сумма : 3

Здесь мы функцию mydef запустили в отдельном потоке. В качестве аргументов функции передали числа 1 и 2.
threading.Thread()

Эта конструкция позволяет создать новый поток, создав экземпляр класса Thread. Вот как выглядят её аргументы:

Она принимает аргументы:

threading.Thread(group=None, target=None, name=None, args=(),
                 kwargs={}, *, daemon=None)

Рассмотрим их подробнее:

    group. Имеет значение None, зарезервирована для будущего расширения при реализации класса ThreadGroup.
    target. Это функция, которая выполняется в потоке с помощью метода run(), если передано значение None, ничего не вызывается.
    name. Это имя потока, по умолчанию оно принимает значение «Thread-X», где X – десятичное число. Программист может задать имя вручную.
    args. Это кортеж, в котором хранятся аргументы, передаваемые в вызываемую функцию.
    kwargs. Это словарь, в котором хранятся аргументы, передаваемые в функцию.
    daemon. Это параметр, который устанавливает, является ли поток демоническим. По умолчанию имеет значение None, тогда свойство daemonic наследуется от текущего потока. Программист может самостоятельно установить значение параметра.
