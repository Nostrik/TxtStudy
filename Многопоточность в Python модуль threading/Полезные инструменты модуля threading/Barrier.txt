Этот класс позволяет реализовать простой механизм синхронизации потоков. Его можно использовать для фиксированного числа потоков, когда необходимо, чтобы каждый поток ждал выполнения какого-либо действия всеми.

Для того чтобы продолжить выполнения, все потоки должны вызвать метод wait(), если хоть один поток не сделал этого, остальные блокируются до тех пор, пока метод не будет вызван.

Так выглядят его аргументы:

threading.Barrier(parties, action=None, timeout=None)

Рассмотрим пример использования:

import threading
import time
barrier = threading.Barrier(2)
def myfunc():
    barrier.wait()
    print('отработал barrier')
thr1 = threading.Thread(target = myfunc).start()
time.sleep(1)
print('основной поток')
barrier.wait()

основной поток
отработал barrier

Здесь выставляю barrier на 2 вызова wait. То есть,  для того, чтобы выполнился код после wait, wait должен быть вызван в 2 потоках. В данном случае функция myfunc сразу запускается в потоке, но она сразу не выведет 'отработал barrier' в консоль, а дождётся когда в основном потоке будет вызван wait тоже.